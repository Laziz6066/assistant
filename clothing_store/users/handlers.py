from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import clothing_store.users.keyboards as kb
import clothing_store.database.requests as rq
from clothing_store import config
from aiogram.types import InputMediaPhoto


router = Router()


@router.message(CommandStart())
async def cmd_start(message: Message):
    keyboard = await kb.get_language()
    lang_choice = await rq.get_user(message.from_user.id)
    if lang_choice:
        keyboard = await kb.get_main_keyboard(message.from_user.id)
        await message.answer(config.text_main_menu[lang_choice], reply_markup=keyboard)
    else:
        await message.answer_photo(
            photo=config.main_photo,
            caption="*–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.\n–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:",
            reply_markup=keyboard,
        )


@router.message(F.text.in_({'–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', "Tilni o'zgartirish"}))
async def change_language(message: Message):
    keyboard = await kb.get_language()
    lang_choice = await rq.get_user(message.from_user.id)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:" if lang_choice == 'ru' else "Tilni tanlang:"
    await message.answer(text, reply_markup=keyboard)


# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
@router.message(F.text.in_({'üá∑üá∫ –†—É—Å—Å–∫–∏–π', "üá∫üáø O'zbekcha"}))
async def language_selected(message: Message):
    """
    –ü–µ—Ä–≤—ã–π —Ä–∞–∑ ‚Äî —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–∞–ª—å—à–µ –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —è–∑—ã–∫.
    """
    lang_mapping = {'üá∑üá∫ –†—É—Å—Å–∫–∏–π': 'ru', "üá∫üáø O'zbekcha": 'uz'}
    selected_lang = lang_mapping.get(message.text)

    async with rq.async_session() as session:
        user_exists = await rq.user_exists(message.from_user.id, session)

        if user_exists:
            # –∑–∞–ø–∏—Å—å —É–∂–µ –µ—Å—Ç—å ‚Äî —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫
            await rq.update_user_language(message.from_user.id, selected_lang, session)
        else:
            # –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
            await rq.add_user(
                message.from_user.id,
                message.from_user.first_name,
                selected_lang,
                session,
            )

    keyboard = await kb.get_main_keyboard(message.from_user.id)
    text = (
        "–í—ã–±—Ä–∞–Ω–æ: üá∑üá∫ –†—É—Å—Å–∫–∏–π"
        if selected_lang == 'ru'
        else "Tanlandi: üá∫üáø O'zbekcha"
    )
    await message.answer(text, reply_markup=keyboard)



@router.message(F.text.in_({'–ö–æ–Ω—Ç–∞–∫—Ç—ã', 'Kontaktlar'}))
async def contacts(message: Message):
    keyboard = await kb.get_contacts(message.from_user.id)
    lang_choice = await rq.get_user(message.from_user.id)
    text = config.text_contacts[lang_choice]
    await message.reply(text=text, reply_markup=keyboard, parse_mode="html")


@router.message(F.text.in_({"Xizmat ko'rsatish markazi", '–°–µ—Ä–≤–∏—Å–Ω—ã–π —Ü–µ–Ω—Ç—Ä'}))
async def service_contact(message: Message):
    await message.reply("+998901234567")


@router.message(F.text.in_({'–ú–µ–Ω–µ–¥–∂–µ—Ä', 'Menejer'}))
async def manager_contact(message: Message):
    await message.reply("+998999999999")


@router.message(F.text.in_({'–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'Asosiy menyu'}))
async def main_menu(message: Message):
    keyboard = await kb.get_main_keyboard(message.from_user.id)
    lang_choice = await rq.get_user(message.from_user.id)
    await message.answer(text=config.text_main_menu[lang_choice], reply_markup=keyboard)


@router.message(F.text.in_({'–û –Ω–∞—Å', 'Biz haqimizda'}))
async def about(message: Message):
    lang_choice = await rq.get_user(message.from_user.id)
    await message.answer("–ú–æ–∂–Ω–æ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∏–ª–∏ —Ñ–æ—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å (—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç/–≥—É–≤–æ—Ö–Ω–æ–º–∞)")


@router.message(F.text.in_({'–¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏', 'Bor mahsulotlar'}))
async def view_catalog(message: Message):
    lang_choice = await rq.get_user(message.from_user.id)
    await message.answer(config.choice_category[lang_choice],
                         reply_markup=await kb.show_categories(message.from_user.id))


@router.callback_query(F.data.startswith('show_category_'))
async def show_items(callback: CallbackQuery):
    data_parts = callback.data.split('_')
    category_id = int(data_parts[-1])

    items = await rq.get_items(category_id)
    lang_choice = await rq.get_user(callback.from_user.id)

    if not items:
        text = "–¢–æ–≤–∞—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã." if lang_choice == 'ru' else "Maxsulotlar topilmadi."
        await callback.message.answer(text)
        await callback.answer()
        return

    price_text = "–¶–µ–Ω–∞:" if lang_choice == 'ru' else "Narxi:"

    for item in items:
        keyboard = await kb.item_keyboard(item.id, callback.from_user.id)
        item_name = item.name_ru if lang_choice == 'ru' else item.name_uz
        item_description = item.description_ru if lang_choice == 'ru' else item.description_uz
        item_in_stock_ru = "–í –Ω–∞–ª–∏—á–∏–∏" if item.in_stock == True else "–ü–æ–¥ –∑–∞–∫–∞–∑"
        item_in_stock_uz = "Sotuvda mavjud" if item.in_stock == True else "Buyurtma bilan"
        item_in_stock = item_in_stock_ru if lang_choice == 'ru' else item_in_stock_uz
        print(item_in_stock)

        if isinstance(item.photo, list):
            if len(item.photo) > 1:
                media = []
                for index, photo_url in enumerate(item.photo):
                    if index == 0:
                        media.append(
                            InputMediaPhoto(
                                media=photo_url,
                                caption=f"{item_name}\n{item_description}\n{price_text} "
                                        f"<b>{item.price:,.0f} UZS.</b>".replace(",", " "),
                                parse_mode='html'
                            )
                        )
                    else:
                        media.append(InputMediaPhoto(media=photo_url))
                await callback.message.answer_media_group(media=media)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–æ–¥ —Ç–æ–≤–∞—Ä–æ–º
                await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
            elif len(item.photo) == 1:
                photo_url = item.photo[0]
                await callback.message.answer_photo(
                    photo=photo_url,
                    caption=f"{item_name}\n{item_description}\n{price_text} "
                            f"<b>{item.price:,.0f} UZS.</b>\n<b>{item_in_stock}</b>".replace(",", " "),
                    reply_markup=keyboard,
                    parse_mode='html'
                )
            else:
                await callback.message.answer(
                    text=f"{item_name}\n{item_description}\n{price_text} "
                         f"<b>{item.price:,.0f} UZS.</b>".replace(",", " "),
                    reply_markup=keyboard,
                    parse_mode='html'
                )
        else:
            await callback.message.answer_photo(
                photo=item.photo,
                caption=f"{item_name}\n{item_description}\n{price_text} "
                        f"<b>{item.price:,.0f} UZS.</b>".replace(",", " "),
                reply_markup=keyboard,
                parse_mode='html'
            )
    await callback.answer()


@router.callback_query(F.data.startswith('to_main_inline'))
async def catalog_main(callback: CallbackQuery):
    lang_choice = await rq.get_user(callback.from_user.id)
    await callback.message.edit_text(config.choice_category[lang_choice],
                                     reply_markup=await kb.show_categories(callback.from_user.id))
    await callback.answer()


@router.message(F.text == "–ú–æ–∏ –±–∞–ª–ª—ã")
async def show_balance(message: Message):
    user = await rq.get_user_reg(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return

    level = "–ù–æ–≤–∏—á–æ–∫"
    if user.total_spent >= 7_000_000:
        level = "–ü–ª–∞—Ç–∏–Ω–æ–≤—ã–π"
    elif user.total_spent >= 3_000_000:
        level = "–ó–æ–ª–æ—Ç–æ–π"
    elif user.total_spent >= 1_000_000:
        level = "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π"

    await message.answer(
        f"–ë–∞–ª–∞–Ω—Å: <b>{user.bonus_balance} –±–∞–ª–ª–æ–≤</b>\n"
        f"–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å: <b>{level}</b>\n"
        f"–í—Å–µ–≥–æ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ —Å—É–º–º—É: <b>{user.total_spent:,} UZS</b>\n\n"
        f"100 –±–∞–ª–ª–æ–≤ = 1 000 UZS —Å–∫–∏–¥–∫–∏", parse_mode='HTML'
    )


@router.message(F.text == "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞")
async def invite_friend(message: Message):
    user = await rq.get_user_reg(message.from_user.id)
    if not user:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!")
        return

    if not user.referral_code:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥
        code = f"REF{message.from_user.id:06d}"
        await rq.update_user(message.from_user.id, referral_code=code)
    else:
        code = user.referral_code

    await message.answer(
        "–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!\n\n"
        f"–í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥: <code>{code}</code>\n\n"
        "–ö–æ–≥–¥–∞ –¥—Ä—É–≥ —Å–¥–µ–ª–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –∏ —É–∫–∞–∂–µ—Ç –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥, "
        "–≤—ã –ø–æ–ª—É—á–∏—Ç–µ 3000 –±–æ–Ω—É—Å–Ω—ã—Ö –±–∞–ª–ª–æ–≤, –∞ –¥—Ä—É–≥ - 1000 –±–∞–ª–ª–æ–≤."
    )


@router.message(F.text == "–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑")
async def track_order(message: Message):
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
        reply_markup=await get_user_orders_keyboard(message.from_user.id)
    )


async def get_user_orders_keyboard(user_id: int):
    user = await rq.get_user_reg(user_id)
    if not user:
        return None

    orders = await rq.get_user_orders(user.id)
    keyboard = InlineKeyboardBuilder()

    for order in orders:
        keyboard.add(InlineKeyboardButton(
            text=f"–ó–∞–∫–∞–∑ #{order.id} - {order.status}",
            callback_data=f"order_{order.id}"
        ))

    return keyboard.adjust(1).as_markup()